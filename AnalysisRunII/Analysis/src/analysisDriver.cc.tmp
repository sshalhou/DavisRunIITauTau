
#include <iostream>
#include <fstream>
#include <map>
#include <vector>
#include <TH2.h>
#include <TStyle.h>
#include <TTree.h>
#include <TFile.h>
#include "FlatTreeReader.h"
#include "simpleQuantityPrint.h"
#include "histogramLeptonQuantities.h"
#include "generateH2TauSyncTree.h"
#include "eleTauCutFlowTree.h"
#include "singleEventHistogramExample.h"
#include "syncTreeAnalysis.h"
#include "generateIdEff.h"
#include "recoilTauTau.h"
#include "functionMethods.h"

int main()
{


  //param block


  /* master list ok known operations */
  std::vector <std::string> known_operations;
  known_operations.push_back("simpleQuantityPrint");
  known_operations.push_back("histogramLeptonQuantities");
  known_operations.push_back("generateH2TauSyncTree");
  known_operations.push_back("eleTauCutFlowTree");
  known_operations.push_back("singleEventHistogramExample");
  known_operations.push_back("syncTreeAnalysis");
  known_operations.push_back("generateIdEff");
  known_operations.push_back("recoilTauTau");
  known_operations.push_back("functionMethods");

  /* parse the operations into a name bool map */
  /* and check that all requested operations are valid */

  std::map <std::string, bool> operations_map;

  //Param block edited by py file
  
  // set operations performed
  //Add operations here
  
  /* read in a FlatTuple file and ttree */
  //Add TTree here
  
  // case 1 : a single .root file name or case 2: txt file with file names:
  //Add root files here
  
  
  if(!T) 
    {
      std::cout<<"invalid file, tree, or TChain, check command line arguments \n";
      return -999;
    }


  /* create a reader object and connect the TTree pointer */
  FlatTreeReader R(T);


  /* invoke the operations */
  simpleQuantityPrint  SQP(R,operations_map["simpleQuantityPrint"]);
  histogramLeptonQuantities HLQ(R,operations_map["histogramLeptonQuantities"]);
  generateH2TauSyncTree    SYNC(R,operations_map["generateH2TauSyncTree"]);
  eleTauCutFlowTree        ETAUCUT(R,operations_map["eleTauCutFlowTree"]);
  singleEventHistogramExample TWOD(R,operations_map["singleEventHistogramExample"]);
  syncTreeAnalysis SYNCTREEANA(R,operations_map["syncTreeAnalysis"]);
  generateIdEff GENIDEFF(R,operations_map["generateIdEff"]);
  recoilTauTau RETT(R,operations_map["recoilTauTau"]);
  functionMethods FMETH(R,operations_map["functionMethods"]);


  long int entries = T->GetEntries();

  std::cout<<" total events = "<<entries<<"\n";

  for(long int e = 0; e<entries; ++e)
    {
      
      T->GetEntry(e);

      if(e%1000 == 0)
      {
        std::cout<<" event "<<e<<" of "<<entries<<"\n";

	  /* only print this stuff once every 1000 events */
	    if(operations_map["simpleQuantityPrint"]) SQP.handleEvent();

	    }

      if(operations_map["histogramLeptonQuantities"]) HLQ.handleEvent();
      if(operations_map["generateH2TauSyncTree"]) SYNC.handleEvent();
      if(operations_map["eleTauCutFlowTree"]) ETAUCUT.handleEvent();
      if(operations_map["singleEventHistogramExample"]) TWOD.handleEvent();
      if(operations_map["syncTreeAnalysis"]) SYNCTREEANA.handleEvent();
      if(operations_map["generateIdEff"]) GENIDEFF.handleEvent();
      if(operations_map["recoilTauTau"]) RETT.handleEvent();
      if(operations_map["functionMethods"]) FMETH.handleEvent();
      ///////// EXAMPLE CODE SHOWING ACCESS  -- END


      if(e==entries-1) std::cout<<" event "<<e<<" of "<<entries<<"\n";
    }

  if(operations_map["simpleQuantityPrint"]) SQP.finish();
  if(operations_map["histogramLeptonQuantities"]) HLQ.finish();
  if(operations_map["generateH2TauSyncTree"]) SYNC.finish();
  if(operations_map["eleTauCutFlowTree"]) ETAUCUT.finish();
  if(operations_map["singleEventHistogramExample"]) TWOD.finish();
  if(operations_map["syncTreeAnalysis"]) SYNCTREEANA.finish();
  if(operations_map["generateIdEff"]) GENIDEFF.finish();
  if(operations_map["recoilTauTau"]) RETT.finish();
  if(operations_map["functionMethods"]) FMETH.finish();
  return 0;
}

